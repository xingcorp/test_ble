1. Chuẩn bị Project
Mở Android Studio → New Project → chọn Empty Activity.


Chọn Minimum SDK: API 21 (Android 5.0).


Ngôn ngữ: Kotlin.



2. Thêm dependency vào app/build.gradle
dependencies {
    implementation 'org.altbeacon:android-beacon-library:2.20.6'
}


3. Thêm quyền vào AndroidManifest.xml
<uses-permission android:name="android.permission.BLUETOOTH"/>
<uses-permission android:name="android.permission.BLUETOOTH_ADMIN"/>
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
<uses-permission android:name="android.permission.ACCESS_BACKGROUND_LOCATION"/>
<uses-permission android:name="android.permission.BLUETOOTH_SCAN"/>
<uses-permission android:name="android.permission.BLUETOOTH_CONNECT"/>

⚠️ Với Android 12+, bạn phải xin runtime permission cho BLUETOOTH_SCAN và ACCESS_BACKGROUND_LOCATION.

4. Code Foreground Service quét beacon
MyBeaconService.kt
package com.example.beacondemo

import android.app.*
import android.content.Intent
import android.os.Build
import android.os.RemoteException
import androidx.core.app.NotificationCompat
import org.altbeacon.beacon.*

class MyBeaconService : Service(), BeaconConsumer {

    private lateinit var beaconManager: BeaconManager

    override fun onBind(intent: Intent?) = null

    override fun onCreate() {
        super.onCreate()
        beaconManager = BeaconManager.getInstanceForApplication(this)

        // Parser cho iBeacon
        beaconManager.beaconParsers.add(
            BeaconParser().setBeaconLayout(BeaconParser.IBEACON_LAYOUT)
        )

        // Tắt JobScheduler, dùng Foreground service thay
        beaconManager.setEnableScheduledScanJobs(false)

        // Bắt đầu foreground notification
        startForeground(1, createNotification("Scanning for beacons..."))

        beaconManager.bind(this)
    }

    override fun onBeaconServiceConnect() {
        beaconManager.addRangeNotifier { beacons, _ ->
            if (beacons.isNotEmpty()) {
                for (beacon in beacons) {
                    // Log beacon tìm thấy
                    android.util.Log.d("BEACON", "Beacon: ${beacon.id1}, RSSI: ${beacon.rssi}")
                }
            }
        }

        try {
            beaconManager.startRangingBeaconsInRegion(
                Region("all-beacons", null, null, null)
            )
        } catch (e: RemoteException) {
            e.printStackTrace()
        }
    }

    private fun createNotification(text: String): Notification {
        val channelId = "beacon_channel"
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(
                channelId, "Beacon Service",
                NotificationManager.IMPORTANCE_LOW
            )
            val nm = getSystemService(NotificationManager::class.java)
            nm.createNotificationChannel(channel)
        }

        return NotificationCompat.Builder(this, channelId)
            .setContentTitle("Beacon Scanner")
            .setContentText(text)
            .setSmallIcon(android.R.drawable.ic_menu_mylocation)
            .build()
    }

    override fun onDestroy() {
        super.onDestroy()
        beaconManager.unbind(this)
    }
}


5. Start Service từ Activity
MainActivity.kt
package com.example.beacondemo

import android.Manifest
import android.content.Intent
import android.content.pm.PackageManager
import android.os.Build
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.result.contract.ActivityResultContracts
import androidx.core.app.ActivityCompat

class MainActivity : ComponentActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        // Xin quyền runtime
        val permissions = mutableListOf(
            Manifest.permission.ACCESS_FINE_LOCATION
        )
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
            permissions.add(Manifest.permission.ACCESS_BACKGROUND_LOCATION)
        }
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            permissions.add(Manifest.permission.BLUETOOTH_SCAN)
            permissions.add(Manifest.permission.BLUETOOTH_CONNECT)
        }

        val launcher = registerForActivityResult(
            ActivityResultContracts.RequestMultiplePermissions()
        ) { result ->
            if (result.values.all { it }) {
                startService(Intent(this, MyBeaconService::class.java))
            }
        }

        // Kiểm tra quyền, nếu thiếu thì xin
        if (permissions.any {
                ActivityCompat.checkSelfPermission(this, it) != PackageManager.PERMISSION_GRANTED
            }) {
            launcher.launch(permissions.toTypedArray())
        } else {
            startService(Intent(this, MyBeaconService::class.java))
        }
    }
}


6. Khai báo Service trong AndroidManifest.xml
<application
    ... >
    <service
        android:name=".MyBeaconService"
        android:enabled="true"
        android:exported="false" />
</application>


7. Build và chạy
Build: Nhấn ▶️ trong Android Studio để build app.


Cài vào điện thoại: Chạy app → nó xin quyền → sau khi cấp, service bắt đầu chạy.


Kiểm tra logcat: Bạn sẽ thấy log như:

